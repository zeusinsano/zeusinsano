#! py
################################################# by ############# ##########  #       # ########
#                                               #               #  #           #       #  #
#https://www.instagram.com/zeusinsanox11        #             #    #           #       #   #
#https://github.com/zeusinsano                  #           #      ######      #       #    #
#https://www.youtube.com/c/ZeusInsano           #         #        #           #       #     #
#                                               #       #          #           #       #      #
#################################################    ############  ##########  ######### #######

#    Importar subprocesso para que possamos usar comandos do sistema.
import subprocess

#    Importe o módulo re para que possamos usar expressões regulares.
import re

#    Python nos permite executar comandos do sistema usando a função.
#    fornecido pelo módulo de subprocesso; 
#    (subprocess.run(<lista de argumentos de linha de comando aqui>, <especifique o segundo argumento se quiser capturar a saída>)).
#
#    Este script é um processo pai que cria um processo filho que
#    executa um comando do sistema e só continuará quando o processo filho 
#    está completo.
#
#    Para salvar o conteúdo que é enviado para o fluxo de saída padrão
#    (o terminal), devemos primeiro especificar que queremos capturar a saída.
#    Para fazer isso, especificamos o segundo argumento como capture_output = True. 
#    Essas informações são armazenadas no atributo stdout como bytes e 
#    precisa ser decodificado antes de ser usado como uma String em Python.
command_output = subprocess.run(["netsh", "wlan", "show", "profiles"], capture_output = True).stdout.decode()

#    Importamos o módulo re para fazer uso de expressões regulares. 
#    Queremos encontrar todos os nomes de wifi listados após
#    "ALL User Profile     :". Usando expressões regulares podemos criar
#    um grupo de todos os caracteres até que a sequência de escape de retorno (\r) apareça.
profile_names = (re.findall("All User Profile     : (.*)\r", command_output))

#    Criamos uma lista vazia fora do loop onde os dicionários
#    contendo todos os nomes de usuário e senhas wifi serão salvos.
wifi_list = []

#    Se nenhum nome de perfil for encontrado, isso significa que as conexões wifi
#    também não foram encontrados. Então, executamos esta parte para verificar o
#    detalhes do wifi e ver se podemos obter suas senhas.
if len(profile_names) != 0:
    for name in profile_names:
        #    Cada conexão wifi precisará de seu próprio dicionário que
        #    será anexado à variável wifi_list.
        wifi_profile = {}
        #    Agora podemos executar um comando mais específico para ver as informações
        #    sobre a conexão wifi e se o Security key
        #    não está ausente, pode ser possível obter o password.
        profile_info = subprocess.run(["netsh", "wlan", "show", "profile", name], capture_output = True).stdout.decode()
        #   Usamos a expressão regular para procurar apenas os casos ausentes para que possamos ignorá-los.
        if re.search("Security key           : Absent", profile_info):
            continue
        else:
            #    Atribua o ssid do perfil wifi ao dicionário.
            wifi_profile["ssid"] = name
            #    Esses casos não estão ausentes e devemos executar o 
            #    "key=clear" parte de comando para obter o password.
            profile_info_pass = subprocess.run(["netsh", "wlan", "show", "profile", name, "key=clear"], capture_output = True).stdout.decode()
            #    Novamente execute a expressão regular para capturar o
            #    grupo após o : (que é o password).
            password = re.search("Key Content            : (.*)\r", profile_info_pass)
            #    Verifique se encontramos uma senha usando a expressão regular.
            #    Algumas conexões wifi podem não ter senhas.
            if password == None:
                wifi_profile["password"] = None
            else:
                #    Atribuímos o agrupamento (onde a senha está contida) que
                #    estamos interessados ​​na chave de senha no dicionário.
                wifi_profile["password"] = password[1]
            #    Anexamos as informações de wifi à variável wifi_list.
            wifi_list.append(wifi_profile) 

for x in range(len(wifi_list)):
    print(wifi_list[x])
